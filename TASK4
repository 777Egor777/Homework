#include "stdafx.h"
#include<iostream>
#include<fstream>
#include<stdio.h>
#include<algorithm>
#include<cmath>
#include<math.h>
#include<cstring>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<deque>

#define pb push_back
#define mp make_pair
#define forn(i,n) for(int i=0;i<(n);i++)

using namespace std;

const int INF = 1e9 + 7;
const double eps = 1e-9;
typedef pair<int, int> pii;
typedef pair<double, pii> pipii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef vector<vd> vvd;

struct elem
{
	double first;
	pii second;

	elem() {}
	elem(const double & d, const pii & p)
	{
		first = d;
		second = p;
	}

	bool operator < (const elem & e) const {
		return first - e.first < -eps;
	}

	bool operator == (const elem & e) const {
		return abs(first-e.first) <= eps;
	}

	bool operator > (const elem & e) const {
		return first - e.first > eps;
	}
};


void astar(const vvi & g, int n, int m, vvd & d)
{
	vvd d1(n, vd(m, INF));
	vvi d2(n, vi(m, INF));
	d.assign(n, vd(m, INF));
	d1[0][0] = 0;
	forn(i, n) forn(j, m) d2[i][j] = n - i + m - j - 2;
	set<elem> s;
	d[0][0] = d1[0][0] + d2[0][0];
	
	s.insert( elem(d[0][0], mp(0,0) ) );
	
	while (!s.empty())
	{
		elem q = *s.begin();
		int  i = q.second.first, j = q.second.second;
		s.erase(s.begin());

		vector<pii> v;
		v.push_back(mp(i - 1,j-1));
		v.push_back(mp(i - 1,j));
		v.push_back(mp(i - 1,j+1));
		v.push_back(mp(i,j-1));
		v.push_back(mp(i,j+1));
		v.push_back(mp(i + 1,j-1));
		v.push_back(mp(i + 1,j));
		v.push_back(mp(i + 1,j+1));
	
		forn(qqq, (int)v.size())
		{
			int i1 = v[qqq].first, j1 = v[qqq].second;
			if (i1 < 0 || i1 >= n || j1 < 0 || j1 >= m)continue;
			if (g[i1][j1] == -1) continue;
			double dist1 =  sqrt( (double)( (i1 - i)*(i1 - i) + (j1 - j)*(j1 - j) ) ),
				   dist2 = d1[i][j] + dist1;
			if (eps < d1[i1][j1] - dist2)
			{			
				d1[i1][j1] = dist2;
				s.erase(elem(d[i1][j1], mp(i1, j1)));
				d[i1][j1] = d1[i1][j1] + d2[i1][j1];
				s.insert(elem(d[i1][j1], mp(i1, j1)));
			}
		}
	}

}

void djkstra(const vvi & g, int n, int m, vvd & d)
{
	d.assign(n, vd(m, INF));
	d[0][0] = 0;
	set<elem> s;
	s.insert(elem(d[0][0], mp(0, 0)));

	while (!s.empty())
	{
		elem q = *s.begin();
		int  i = q.second.first, j = q.second.second;
		s.erase(s.begin());

		vector<pii> v;
		v.push_back(mp(i - 1, j - 1));
		v.push_back(mp(i - 1, j));
		v.push_back(mp(i - 1, j + 1));
		v.push_back(mp(i, j - 1));
		v.push_back(mp(i, j + 1));
		v.push_back(mp(i + 1, j - 1));
		v.push_back(mp(i + 1, j));
		v.push_back(mp(i + 1, j + 1));

		forn(qqq, (int)v.size())
		{
			int i1 = v[qqq].first, j1 = v[qqq].second;
			if (i1 < 0 || i1 >= n || j1 < 0 || j1 >= m)continue;
			if (g[i1][j1] == -1) continue;
			double dist1 = sqrt((double)((i1 - i)*(i1 - i) + (j1 - j)*(j1 - j))),
				dist2 = d[i][j] + dist1;
			if (eps < d[i1][j1] - dist2)
			{
				s.erase(elem(d[i1][j1], mp(i1, j1)));
				d[i1][j1] = dist2;
				s.insert(elem(d[i1][j1], mp(i1, j1)));
			}
		}
	}
}

void make_random_graph(int & n, int & m, vvi & graph)
{
	n = ((int)(abs((int)(rand())))) % 5 + 5;
	m = ((int)(abs((int)(rand())))) % 5 + 5;
	graph.assign(n, vi(m));
	forn(i, n) forn(j, m) if (((int)(rand())) % 2) graph[i][j] = 0;else graph[i][j] = -1;
	graph[0][0] = 0;
}

void TESTING()
{
	int NUMBER_OF_TESTS = 10;

	forn(i, NUMBER_OF_TESTS)
	{
		int n, m;
		vvi graph;
		make_random_graph(n,m,graph);
		vvd d1,d2;
		astar(graph, n, m, d1);
		djkstra(graph, n, m, d2);

		cout << "TEST # " << i + 1 << "\n";
		cout << "Astar gave result: " << d1[n - 1][m - 1] << endl;
		cout << "Djkstra gave result: " << d2[n - 1][m - 1] << endl;
		if (abs(d1[n - 1][m - 1] - d2[n - 1][m - 1]) <= eps) cout << "OK\n";
		else
		{
			cout << "WA\nProgram isn't correct";
			return;
		}
	}
	cout << "Program is correct";
}

int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt", "w", stdout);

	TESTING();
}
